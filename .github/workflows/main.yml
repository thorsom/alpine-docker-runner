# Weekly check for new alpine version and create a docker image if new version is found
name: Weekly check

# Scheduled and manual run
on:
  schedule:
    - cron: '06 04 * * 1'
  workflow_dispatch:

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

# Check if a new release of alpine is available and creates a new release if it is
jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      alive: ${{ steps.new.outputs.alive }}
      version: ${{ steps.check.outputs.version }}
      
    permissions:
      contents: write
    
    steps:
      - name: Check for new release
        id: check
        run: |
          # Use Docker Hub's API to check for a new release
          LATEST_RELEASE=$(curl --silent "https://hub.docker.com/v2/repositories/library/alpine/tags?page_size=1&page=2" | jq -r '.results[].name')
          echo "version=${LATEST_RELEASE}" >> $GITHUB_OUTPUT
          # echo "::set-output name=version::${LATEST_RELEASE}"
      
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Read latest processed release
        id: read
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CURRENT_RELEASE=$(curl --silent --header "Authorization: Bearer $GH_TOKEN" --url "https://api.github.com/repos/thorsom/alpine-docker-runner/releases/latest" | jq -r .tag_name)
          if [ $CURRENT_RELEASE ]; then
            echo "::set-output name=processed::${CURRENT_RELEASE}"
          else
            echo "::set-output name=processed::"
          fi

      - name: Create new release
        id: new
        if: steps.check.outputs.version != steps.read.outputs.processed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "alive=true" >> $GITHUB_OUTPUT
          # Create a new release in your repository
          gh release create ${{ steps.check.outputs.version }} -n "Updated container to alpine version ${{ steps.check.outputs.version }}"


  build-and-push-image:
    needs: check-release
    if: ${{ needs.check-release.outputs.alive == 'true' }}
    runs-on: ubuntu-latest

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.check-release.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }} 
